// ==================================================================== //
// ------------- From Elphy DataFile to a Binary File ----------------- //
// ----------- Metadata (TDBrecord,...) written in a JSON file  ------- //
// ==================================================================== //

const
ROOT_DATA = '\DATA' ; // this will be translated into ROOT_DATA+'_binary' (so here '\DATA_binary') to store the binary files !!!!
Starting_Directory = 'D:\Yann\DATA'; // just the value for the starting directory

var elphy_filename, binary_filename, json_filename, dat_directory, new_directory : string ;
var time:TdateTime; var size:longword; var att:integer ;    
     

// --- for the binary file very simple, no header, no [...]
// just the episodes one by one and the channels one by one  
// --- JSON file : all the remaining importnat informations
// about the protocol and acquisition       
procedure save_Binary_Json(elphy_filename, binary_filename, json_filename:string);
var datafile : Tdatafile ; binfile : TbinaryFile; db_info : TDBrecord;
    channelID, episodeID, jj, ii : integer ;
    st, st2 : string;
begin
  // loading Elphy datafile 
  datafile.create;
  datafile.NewFile(elphy_filename);
  // creating the binary file
  binfile.rewrite(binary_filename);
  // creating the json file
  openText(1, json_filename, False); // False for writing mode
  

  statuslineTxt('==> translating binary and json files for :'+elphy_filename);
  
  // Binary file writing ! 
  for episodeID:=1 to datafile.EpCount do
  begin 
    datafile.EpNum := episodeID ;                                                                                           
    for channelID := 1 to datafile.channelcount do
    begin
      statuslineTxt('channel'+Istr(channelID)+', episode'+Istr(episodeID)+' v1[0]='+Rstr(datafile.v[1][datafile.v[1].Iend]));
      datafile.v[channelID].SaveBinaryData(binfile, 2);
    end;
  end;
  
  // JSON file
  writelnText(1,'{'); // and we start the dict() structure
  db_info.create;  
  {we start by the informations stored in the TdbRecord associated to the acquisition file} 
  datafile.ReadDBFileInfo(db_info);
  for jj:=1 to db_info.count do
  begin  
    st:= db_info.Names[jj] ;
    st2:=db_info.Valstring[jj];
    writelnText(1,'"'+st+'":"'+st2+'",');
  end;        
  // then the gain of each channel
  for ii:=1 to datafile.ChannelCount do
      WriteLnText(1, '"gain_'+Istr(ii)+'" : "'+Rstr(datafile.v[ii].dY)+'",');
  // then the unit of each channel
  WriteLnText(1, '"unitX" : "'+datafile.v[1].unitX+'",'); // all channels have the same x unit
  for ii:=1 to datafile.ChannelCount do
      WriteLnText(1, '"unitY_'+Istr(ii)+'" : "'+datafile.v[ii].unitY+'",');
  // Then some other very usefull things:
  WriteLnText(1, '"ChannelCount" : "'+Istr(datafile.ChannelCount)+'",');
  WriteLnText(1, '"EpCount" : "'+Istr(datafile.EpCount)+'",');
  // finally we close the JSON file 
  writelnText(1,'"lastline":"no_value"}'); // we write a last line (just to have no comma)
  CloseText(1);
   
  // we close everything
  db_info.free; datafile.free; binfile.free;
  statuslineTxt('DONE !! ');
end;

// we translate a data path of Elphy files into a data path of binary files
// if this directory does not exist, we create it
// N.B. the new directory will translate ROOT_DATA in ROOT_DATA+'_binary'
procedure get_binary_data_path(elphy_data_path:string; var binary_data_path:string);
begin
binary_data_path := binary_data_path;
if Pos(ROOT_DATA, binary_data_path)>0
then 
 begin
  Insert('_binary', binary_data_path, Pos(ROOT_DATA, binary_data_path)+Length(ROOT_DATA));
  if not DirectoryExists(binary_data_path)then createDir(binary_data_path);
 end
else
 MessageBox('Directory do not contains the ROOT_DATA directory (see comments in code)');
end;

procedure get_binary_filename(elphy_filename:string; var binary_filename:string);
var st:string; var path, name:string; var num:integer; var ext:string;
begin
   SplitFileNameEx(elphy_filename, path, name, num, ext);
   get_binary_data_path(path, path); // we change the path to put it in the binary folder
   binary_filename := path+name+Istr(num)+'.bin'; // we also change the extension
end;

procedure get_json_filename(elphy_filename:string; var json_filename:string);
var st:string; var path, name:string; var num:integer; var ext:string;
begin
   SplitFileNameEx(elphy_filename, path, name, num, ext);
   get_binary_data_path(path, path); // we change the path to put it in the binary folder
   json_filename := path+name+Istr(num)+'.json'; // we also change the extension
end;

program Convert_a_single_File
elphy_filename := Starting_Directory+'\*.DAT';
ChooseFile(elphy_filename);
get_binary_filename(elphy_filename, binary_filename);
get_json_filename(elphy_filename, json_filename);
save_Binary_Json(elphy_filename, binary_filename, json_filename);

program Loop_over_files_in_root_folder
ChooseDirectory('Choose a ROOT directory to loop on ALL containing files', Starting_Directory, dat_directory);
elphy_filename := FirstFile(dat_directory+'\*.*', True, time, size, att);
while (elphy_filename<>'') do 
 begin
  if extractFileExt(elphy_filename)='.DAT' then 
    begin
     MessageBox(elphy_filename);
     get_binary_filename(elphy_filename, binary_filename);
     MessageBox(binary_filename);
     get_json_filename(elphy_filename, json_filename);
     save_Binary_Json(elphy_filename, binary_filename, json_filename);
    end;
  elphy_filename := NextFile ;
 end;  
MessageBox('Loop over the ROOT folder terminated !');