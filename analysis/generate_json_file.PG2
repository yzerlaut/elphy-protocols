const
explorDir = True; // do you want to recursively execute the procedure over your whole tree
Default_Dir = 'Z:\media\DATA_EqAlain\files\DATA'; // just the value for the starting directory

var initial_directory : string ;

procedure delete_the_last_two_lines(json_file:string);
{you should use this function if you want to append things
to a pre-existing json file that contains parameters. You need
to delete the last two lines, then add the lines you wnat then
again add the two fake last lines (see below) for the dict() structure }
var line2, lst_ln : string ;
begin
    lst_ln :='"lastline":"no_value"'; // default last line of the json file
    openText(1, json_file+'.txt', False);  // writing      
    openText(2, json_file, True); // reading
    ReadLnText(2, line2); 
    while (line2<>'') and (line2<>lst_ln) do
    // if different than last line 
    begin
         WriteLnText(1, line2);
         ReadLnText(2, line2);
    end;
    CloseText(1);CloseText(2);
    DeleteFile(json_file);
    RenameFile(json_file+'.txt', json_file);
end;


procedure create_json_file(filename:string);
var datafile : Tdatafile ; json_file, st, st2 : string;
    ii, jj : integer ; db_info : TDBrecord;
begin
   json_file := filename+'.json'; 
   if FileExists(json_file) then 
   // in case the json file exists, we delete the 2 last rows and append things to it
   begin
      delete_the_last_two_lines(json_file);
      AppendText(1, json_file);
   end
   // in case the file doesn't already exists, we create it
   else 
   begin
     openText(1, json_file, False);
     writelnText(1,'{'); // and we start the dict() structure
   end;
   datafile.create;
   db_info.create;  

   datafile.NewFile(filename);
   
  {we start by the informations stored in the TdbRecord associated to the acquisition file} 
  datafile.ReadDBFileInfo(db_info);
  for jj:=1 to db_info.count do
  begin  
    st:= db_info.Names[jj] ;
    st2:=db_info.Valstring[jj];
    if st<>'s' then writelnText(1,'"'+st+'":"'+st2+'",');
  end;        

   for ii:=1 to datafile.ChannelCount do
      WriteLnText(1, '"DY'+Istr(ii)+'" : "'+Rstr(datafile.v[ii].dY)+'",');
      
   writelnText(1,'"lastline":"no_value"'); // we write a last line (just to have no comma)
   writelnText(1,'}'); // and we close the dict() structure
   CloseText(1);
   db_info.free; datafile.free;
end;


procedure loop_over_files;
var
initial_directory : string ;
time : TdateTime;
size : longword ;
att : integer ;
current_file : string;
begin
    If ChooseDirectory('What directory do you want to explore ?',Default_Dir,
         initial_directory) then begin
    current_file := FirstFile(initial_directory+'\*.*', True, time, size, att);
    while current_file<>'' do
    begin
        if extractFileExt(current_file)='.DAT' then create_json_file(current_file);
        current_file := NextFile(time, size, att);    
    end;
    MessageBox('procedure terminated');
    end else MessageBox('procedure aborted');  // no directory choosen !
end;


program Loop_over_a_directory
loop_over_files;

var choosen_file : string ;

program Single_file
choosen_file := initial_directory+'\*.DAT';
ChooseFile(choosen_file);
create_json_file(choosen_file);
