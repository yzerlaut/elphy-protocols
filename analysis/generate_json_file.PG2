const
explorDir = True; // do you want to recursively execute the procedure over your whole tree
Default_Dir = 'C:\Users\yann\Desktop'; // just the value for the starting directory

var initial_directory : string ;

var db : TdbRecord; datafile : Tdatafile ; // GLOBAL OBJECTS !!!!


procedure delete_the_last_two_lines(json_file:string);
{you should use this function if you want to append things
to a pre-existing json file that contains parameters. You need
to delete the last two lines, then add the lines you wnat then
again add the two fake last lines (see below) for the dict() structure }
var line2, lst_ln : string ;
begin
    lst_ln :='"lastline":"no_value"'; // default last line of the json file
    openText(1, json_file+'.txt', False);  // writing      
    openText(2, json_file, True); // reading
    ReadLnText(2, line2); 
    while (line2<>'') and (line2<>lst_ln) do
    // if different than last line 
    begin
         WriteLnText(1, line2);
         ReadLnText(2, line2);
    end;
    CloseText(1);CloseText(2);
    DeleteFile(json_file);
    RenameFile(json_file+'.txt', json_file);
end;


procedure load_dbrecord(filename:string); // increments the global objects
begin
    db.create;
    datafile.create;
    datafile.NewFile(filename);
    datafile.ReadDBFileInfo(db);
end;

procedure create_and_fill_json_file(datafile_name:string);
var json_file, st, st2 : string; ii, jj : integer ;
begin
   json_file := datafile_name+'.json'; 
   { in case the json file exists, we delete the 2 last rows and append things to it,
   the code would be :
   if FileExists(json_file) then
   begin
      delete_the_last_two_lines(json_file);
      AppendText(1, json_file);
   end                }

   // but for now we just rewrite it (ALL the informations should lie on the TDBrecord object)
   if FileExists(json_file) then DeleteFile(json_file);
   openText(1, json_file, False);
   writelnText(1,'{'); // and we start the dict() structure

  load_dbrecord(datafile_name);
  {we start by the informations stored in the TdbRecord associated to the acquisition file} 
  for jj:=1 to DB.count do
  begin  
    st:= DB.Names[jj] ;
    st2:=DB.Valstring[jj];
    writelnText(1,'"'+st+'":"'+st2+'",');
  end;        
  {then the dy values for each channels, this is CRUCIAL for the contiuous mode in NEO }
   for ii:=1 to datafile.ChannelCount do WriteLnText(1, '"DY'+Istr(ii)+'" : "'+Rstr(datafile.v[ii].dY)+'",');
   
   {finally we write the last two lines that insures the right dict()-like syntax}   
   writelnText(1,'"lastline":"no_value"'); // we write a last line (just to have no comma)
   writelnText(1,'}'); // and we close the dict() structure
   CloseText(1);
end;

procedure loop_over_files;
var
initial_directory : string ;
time : TdateTime;
size : longword ;
att : integer ;
current_file : string;
begin
    If ChooseDirectory('What directory do you want to explore ?',Default_Dir,
         initial_directory) then begin
    current_file := FirstFile(initial_directory+'\*.*', True, time, size, att);
    while current_file<>'' do
    begin
        if extractFileExt(current_file)='.DAT' then create_and_fill_json_file(current_file);
        current_file := NextFile(time, size, att);    
    end;
    MessageBox('procedure terminated');
    end else MessageBox('procedure aborted');  // no directory choosen !
end;


program start
loop_over_files;

program load2
load_dbrecord('Z:\home\yann\files\DATA\2014_3_5\15_24_25_SINGLE_PULSE1.DAT');