var cursor : Tcursor;
    dialog : Tdialog ;  memo : Tmemo ;
    x1, x2 : real;
    ii : integer ;  prefix : string ;
    imped_vec, phase_vec, actual_freq, freq_vec, amp_vec, time_vec : Tvector ;
    t_start, t_stop : real ;  lver_start,lver_stop  : Tlinever ;
    current_freq, current_amp : real ;
    fit, fit2 : Tcurvefitting;
    ANALYSIS_TYPE : string ; // either membrane, or Efield

procedure load_objects;
var ii:integer; last_t : real ; 
begin
   memo.create;splitstring(dataName,'_',memo) ; {datapath}
   prefix := datapath+memo.lines[1]+'_'+memo.lines[2]+'_'+memo.lines[3]+'_';
   if ANALYSIS_TYPE='Efield' then prefix:=prefix+'EF_';
   time_vec.create; time_vec.loadObject(prefix+'MULTIPLE_SIN_time');
   freq_vec.create; freq_vec.loadObject(prefix+'MULTIPLE_SIN_freq');
   amp_vec.create ; amp_vec.loadObject(prefix+'MULTIPLE_SIN_amp');
   imped_vec.create(t_double, 0, -1); phase_vec.create(t_double, 0, -1); actual_freq.create(t_double, 0, -1);
   fit.create(''); fit2.create('');
   fit.cpx:=1;  fit.cpy:=1;  fit.matchVector(v1);  fit.color:=cl_blue;
   fit2.cpx:=1;  fit2.cpy:=2;  fit2.matchVector(v2);  fit2.color:=cl_blue;
   addObject(1,1,fit);addObject(1,2,fit2);
end; { load_objects }


procedure zoom_on_exp(ii:integer);
var jj : integer ;  switch : real ;
begin
   switch := 0.5 ; // time that we discard before and after the recording
   if time_vec[ii]<time_vec[ii+1] then
   begin t_start := time_vec[ii] ; t_stop := time_vec[ii+1]; end 
   else begin t_start := time_vec[ii+1] ; t_stop := time_vec[ii]; end;
   v1.SetWorld(t_start-switch,v1.Mini(t_start-switch,t_stop+switch),t_stop+switch,v1.Maxi(t_start-switch,t_stop+switch));
   if ANALYSIS_TYPE='Efield' then v3.SetWorld(t_start-switch,v3.Mini(t_start-switch,t_stop+switch),t_stop+switch,v3.Maxi(t_start-switch,t_stop+switch))
   else v2.SetWorld(t_start-switch,v2.Mini(t_start-switch,t_stop+switch),t_stop+switch,v2.Maxi(t_start-switch,t_stop+switch));
   lver_start.x := t_start ; lver_stop.x := t_stop;
   cursor.position[1]:= t_start+switch ; cursor.position[2]:=t_stop-switch ;
   current_freq:= freq_vec[ii];
   current_amp:= amp_vec[ii];
   dialog.update;
   fit.clear; fit2.clear;
end;

procedure make_fit;
var i_phase : real;
begin
   //// CURRENT FIT
   fit2.Text:='RES=ABS(a1)*sin(a2*x-a3)+a4'; 
   fit2.initialize:=true;
   fit2.reset; 
   fit2.setYdata(v2);  fit2.MaxIt:=30;fit2.Maxdata:=10000;   
   fit2.XstartFit:=cursor.position[1]; fit2.XendFit:=cursor.position[2];
   fit2.param['a1']:=v2.maxiX(cursor.position[1],cursor.position[2])-v2.miniX(cursor.position[1],cursor.position[2]);
   fit2.param['a2']:=2*PI*current_freq;  fit2.Clamp['a2']:=True;
   fit2.param['a4']:=v2.mean(fit2.XstartFit,fit2.XendFit); //fit.Clamp['a4']:=True;
   fit2.Execute; fit2.Refresh;
   i_phase := fit2.param['a3'];
   //// VOLTAGE FIT
   //if fit2.param['a3']>0 then fit.Text:='RES=a1*sin(a2*x-'+Rstr(fit2.param['a3'])+'+a3)+a4' 
   //else 
   fit.Text:='RES=ABS(a1)*sin(a2*x-a5-a3)+a4';  
   fit.initialize:=true; 
   fit.reset;  
   fit.setYdata(v1); fit.MaxIt:=30;fit.Maxdata:=10000;   
   fit.XstartFit:=cursor.position[1]; fit.XendFit:=cursor.position[2];
   fit.param['a1']:=v1.maxiX(cursor.position[1],cursor.position[2])-v1.miniX(cursor.position[1],cursor.position[2]);
   fit.param['a2']:=2*PI*current_freq;  fit.Clamp['a2']:=True;
   fit.param['a5']:=fit2.param['a3'];  fit.Clamp['a5']:=True;
   fit.param['a3']:=0;
   fit.param['a4']:=v1.mean(fit.XstartFit,fit.XendFit); //fit.Clamp['a4']:=True;
   fit.Execute; fit.Refresh;
end;

procedure write_on_file;
var st : string ;  ii : integer ;
begin
  openText(1,prefix+'MULTIPLE_SIN_analysed.txt',false);
  writelnText(1,'## impedance in 1000*mV/pA=MOhm or admittance in 1000*pA/mV=pS, then phase in Rd');
  if Imped_vec.Iend<>actual_freq.Iend then MessageBox('problem in the analysis, vector size not compatible');
  for ii:=Imped_vec.Istart to Imped_vec.Iend do 
  begin
     st := Rstr(actual_freq[ii])+Chr(9)+Rstr(1000*Imped_vec[ii])+Chr(9)+Rstr(phase_vec[ii]) ;
     writelnText(1,st);
  end; 
  closeText(1);
  MessageBox('analysed file saved');
end;  

procedure DialogUpdate(n:integer);
var phase : real;
begin
   dialog.updatevar;
   case n of
     { 100: init_analysis; }
     99	 : begin ii:=ii-1; if ii>=time_vec.Istart then zoom_on_exp(ii) ; end;
     101 : begin ii:=ii+1;
	      if ii<time_vec.Iend then zoom_on_exp(ii) else begin closeText(1); MessageBox('Over !'); end;
	   end;
     102: make_fit;
     103 : begin 
            imped_vec.AddToList(ABS(fit.param['a1']/current_amp));
            phase := 1; //fit.param['a3'];
            phase_vec.AddToList(phase);
            actual_freq.AddToList(current_freq);
            ii:=ii+1;
	          if ii<time_vec.Iend then zoom_on_exp(ii)
            else MessageBox('Over !');
	         end;
     104: write_on_file;
   end;	 
   dialog.update;
end;

procedure analysis_windows;
begin
   DestroyAllWindows(1);
   DefineWindow(1,0,0,PageWidth,Round(PageHeight/2.2));
   DefineWindow(1,0,Round(PageHeight/2.2),PageWidth,PageHeight);
   DivideWindow(1,2,1,2);
   Page:=1;
   color:=cl_gray;
   addObject(1,1,v1); v1.title:='V_intra(t)'; v1.color := CL_black ;
   v1.cpx:=1 ; v1.cpy:=1 ;
   if ANALYSIS_TYPE='Efield' then
   begin
   addObject(1,2,v3); v2.title:='I_th_extra(t)'; v2.color := CL_green ; 
   v3.cpx:=1 ; v3.cpy := 2 ;
   end
   else 
   begin
   addObject(1,2,v2); v2.title:='I_th(t)'; v2.color := CL_green ; 
   addObject(1,2,v3); v5.title:='I_real(t)';  v5.color := CL_Olive ; 
   v2.cpx:=1 ; v3.cpx:=1; v2.cpy := 2 ; v3.cpy:=2 ;
   end;
   lVer_start.create('',0,cl_green,0); lver_start.width:=3; addObject(1,1,lVer_start);
   lVer_stop.create('',0,cl_green,0); lver_stop.width:=3; addObject(1,1,lVer_stop);
   cursor.create ; cursor.DoubleCursor:=True ; cursor.InstallSource(v1);
   cursor.style:=cs_X ; cursor.visible:=True ; cursor.color:=cl_red;
   cursor.position[1]:= v1.Xstart ; cursor.position[2]:=v1.Xend ; 
end; { tf_analysis_windows }

procedure analysis_dialog;
begin
   dialog.create;
   dialog.OnEvent:= DialogUpdate;
   dialog.getRealA('t_start (s)',t_start,10,3,200);
   dialog.getRealA('t_stop (s)',t_stop,10,3,200);
   dialog.getIntegerA('episode number',ii,6,200);
   dialog.getCommandA(' previous step ',0,99); { OnEvent flag -> 201 }
   dialog.getCommandA(' next step ',0,101); { OnEvent flag -> 201 }
   dialog.getCommandA(' write results ',0,103); { OnEvent flag -> 201 }
   dialog.settext(''); { OnEvent flag -> 201 }
   dialog.getCommandA(' close file ',0,104); { OnEvent flag -> 201 }
   dialog.settext(''); { OnEvent flag -> 201 }
   dialog.getRealA('current freq. (Hz)',current_freq,10,3,200);
   dialog.getRealA('current amp. (pA)',current_amp,10,3,200);
   dialog.settext(''); { OnEvent flag -> 201 }
   dialog.getCommandA(' Make Fit ',0,102); { OnEvent flag -> 201 }
   dialog.getCommandA(' Append qnd Jump to next ',0,103); { OnEvent flag -> 201 }
   dialog.settext(''); { OnEvent flag -> 201 }
   dialog.getCommandA(' Write to File ',0,104); { OnEvent flag -> 201 }
   dialog.Caption:='Multiple Sin. Analysis';
   dialog.winleft:=0;dialog.wintop:=0;
   dialog.show;
end; { tf_analysis_windows }


procedure full_analysis;
var iii : integer; phase:real;
begin
    load_Objects;
    for iii:=time_vec.Istart+1 to time_vec.Iend-1 do
    begin
         zoom_on_exp(iii);
         make_fit;
         imped_vec.AddToList(ABS(fit.param['a1']/current_amp));
         phase := fit.param['a3'] ;
         phase_vec.AddToList(phase);
         actual_freq.AddToList(current_freq);       
    end;
    write_on_file;
end;

program Manual_Analysis_Current_input
ANALYSIS_TYPE:='';
analysis_windows;
analysis_dialog;
load_objects;
zoom_on_exp(ii);
 
program Automated_analysis_Current_input
ANALYSIS_TYPE:='';
analysis_windows;
analysis_dialog;
full_analysis;

program Manual_Analysis_Efield
ANALYSIS_TYPE:='Efield';
analysis_windows;
analysis_dialog;
load_objects;
zoom_on_exp(ii);
 
program Automated_analysis_Efield
ANALYSIS_TYPE:='Efield';
analysis_windows;
analysis_dialog;
full_analysis;