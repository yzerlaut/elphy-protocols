{ setting the channels for NEURON}

procedure Init_AcqChannels; { Crucial Function }
var gain1,gain2, epdur :real;Continu,stim:boolean;Clamp_int, max_ep_num :integer;
begin { we set all the variables of the acquisition class, then we create the NEURON variables and link it to the analogous variables}

    {In this case, we also load the NEURON files to create the mechanisms, either the Vclamp_hh.hoc file or the Iclamp_hh.hoc file}

    Continu:=TDBrecord('PG0.global').Cont_choice; Clamp_int:=TDBrecord('PG0.global').clamp_int; 
    { done }
    ClearObjects(TDBrecord('PG0.global').page_num,1); ClearObjects(TDBrecord('PG0.global').page_num,2);
    RTneuron.ResetParams;
    acquisition.ChannelCount:=3; { see the documentation, for the details of the acquisition and RTneuron functions }
    
    acquisition.Fcontinuous:=Continu; {Continu is a boolean true in case of continuous acquisition }
    acquisition.PeriodPerChannel:=1./TDBrecord('PG0.global').f_acq; // in ms

    stim:=TDBrecord('PG0.global').stim;
    if stim then acquisition.Fstimulate := True;  // we stimulate or not
    max_ep_num := TDBrecord('PG0.global').max_EP_num ; acquisition.MaxEpCount := max_ep_num ;
    epdur := TDBrecord('PG0.global').episode_duration ; acquisition.EpDuration := epdur ;
    
    acquisition.TriggerMode:= TM_immediate;
    acquisition.Channels[1].ChannelType:= TI_Neuron; { here we set that we read the acquisition from NEURON }
    acquisition.Channels[2].ChannelType:= TI_Neuron;
    acquisition.Channels[3].ChannelType:= TI_Neuron; { we also set up here the visualisation of the command }
    acquisition.Channels[1].DownSamplingFactor:=1;
    acquisition.Channels[2].DownSamplingFactor:=1;
    acquisition.Channels[3].DownSamplingFactor:=1;
    
   
    if Clamp_int=1 then { IF CURRENT-CLAMP }
    begin { we link the analogous signal to the NEURON variables with the right gain }
      acquisition.Channels[1].NrnSymbolName:='cell.soma.v'; acquisition.Channels[1].unitY:='mV' ;
      acquisition.Channels[2].NrnSymbolName:='stim.Ipico'; acquisition.Channels[2].unitY:='pA' ;
      acquisition.Channels[3].NrnSymbolName:='stim.Ipico';  acquisition.Channels[3].unitY:='pA'; // redondant in this case
    end;                         
                                                                                   
    if Clamp_int=2 then { IF VOLTAGE CLAMP }
    begin
      acquisition.Channels[1].NrnSymbolName:='stim.Ipico'; acquisition.Channels[1].unitY:='pA' ;
      acquisition.Channels[2].NrnSymbolName:='cell.soma.v'; acquisition.Channels[2].unitY:='mV' ;
      acquisition.Channels[3].NrnSymbolName:='stim.Vamp'; acquisition.Channels[3].unitY:='mV';
    end; { we will call this function each time we modify a gain }
    
    v1.cpx:=1 ; v2.cpx:=1 ; v1.cpy := 1 ; v2.cpy:= 2; {we set the coupling value -> to couple to future analysis}
    addObject(TDBrecord('PG0.global').page_num,1,v1);
    addObject(TDBrecord('PG0.global').page_num,2,v2);
end;

program Init_AcqChannels
Init_AcqChannels;

procedure Init_StimChannels; { crucial function as well }
var Continu:boolean;Clamp_int:integer;
begin { We link the Elphy stimulation to the NEURON variable, then the NEURON variable to the analogous command }

  Continu:=TDBrecord('PG0.global').Cont_choice;Clamp_int:=TDBrecord('PG0.global').clamp_int;
  stimulator.ChannelCount:=1;
  stimulator.setByProg:=true; { mais on met le build ep plus loin }
  stimulator.Channels[1].ChannelType:=TO_Neuron;
  
  if COntinu=False then stimulator.BufferCount := 0; { to have a infinite number of buffers }
  
  if Clamp_int=1 then { IF CURRENT CLAMP }
  begin
    stimulator.Channels[1].NrnSymbolName:='stim.Ipico';
  end;
  if Clamp_int=2 then { IF VOLTAGE CLAMP }
  begin
    stimulator.Channels[1].NrnSymbolName:='stim.Vamp';
  end;
  
  v3.cpx:=1 ; v3.cpy:= 2; {we couple this channel to v2 }
  addObject(TDBrecord('PG0.global').page_num,2,v3); {on ajoute aussi l'affichage de la stimulation sur le meme grap que la voie 2 }
end;

program Init_StimChannels
Init_StimChannels;

program SetGain1
MessageBox('no gain change in the DEMO mode');

program SetGain2
MessageBox('no gain change in the DEMO mode');


program Init_BothChannels
Init_AcqChannels;
Init_StimChannels;


procedure load_nrn_files;   // load the NEURON model
var clamp_int : integer ; full_path : string ;
begin
clamp_int := TDBrecord('PG0.global').clamp_int ;
if clamp_int=1 then full_path := TDBrecord('PG0.global').loadnrnPath+'Iclamp_hh.hoc'
else full_path := TDBrecord('PG0.global').loadnrnPath+'Vclamp_hh.hoc';
RTneuron.execute('load_file("'+full_path+'")');
end;

program load_nrn_files
load_nrn_files;