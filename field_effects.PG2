{$EDIT Main}
{========================================================================
------- Master file for the field effects experiments -------- ---------
========================================================================}

Const
   ProtocolCount_EF = 3 ; 
   ProtocolCount_PA = 3 ; 

var  { ========= COMMON VARIABLES ============ }
   protocol_choice_ef,  protocol_choice_patch : integer; 
   amplifier, comments, PathOfTheDay, root_dir : string ; 
   MainDialog, Efield_dialog, Patch_dialog, dialog : Tdialog ;{ two dialogs for buttons and protocols}
   stim, SAVING : boolean ; 
   ProtocolName_EF:array[1..protocolCount_EF] of string; ProtoNames_EF:string;
   ProtocolName_PA:array[1..protocolCount_PA] of string; ProtoNames_PA:string;
   DB:Tdbrecord ;  {for metadata information, storing comments, ... }
   Year,Month,Day,Hour,Minute,Second,MilliSecond:smallint; {variables to fetch the date and time }
   gain1,gain2 : real; gain1_int,gain2_int,clamp_int:integer;cont_choice:boolean;  
   dll_load : string ;


{ ============================================================================
 ---- Protocol names and graphical settings ----------------------------------
 ============================================================================= }
 
 
procedure SetProtocolNames;
var          
  i:integer;
begin
  ProtocolName_EF[1]:= 'Passive-Recording';
  ProtocolName_EF[2]:= 'Pulses';
  ProtocolName_EF[3]:= 'Sinusoids';
  ProtoNames_EF:=ProtocolName_EF[1];
  for i:=2 to ProtocolCount_EF do ProtoNames_EF:=ProtoNames_EF+'|'+ProtocolName_EF[i];
  ProtocolName_PA[1]:= 'Passive-Recording';
  ProtocolName_PA[2]:= 'Pulses';
  ProtocolName_PA[3]:= 'Sinusoids';
  ProtoNames_PA:=ProtocolName_PA[1];
  for i:=2 to ProtocolCount_PA do ProtoNames_PA:=ProtoNames_PA+'|'+ProtocolName_PA[i];
end;    

procedure init_windows;
begin
  deleteallpages('default');
  InsertPage(1,'Efield exps');
  Definewindow(1, 0, 0, PageWidth, Round(PageHeight/3.));
  Definewindow(1, 0, Round(PageHeight/3), PageWidth, Round(PageHeight/2));
  Definewindow(1, 0, Round(PageHeight/2), PageWidth, Round(3*PageHeight/4));
  Definewindow(1, 0, Round(PageHeight*3/4), PageWidth, PageHeight);
  color:=cl_gray;
end;


{$EDIT channels_settings} 
{ Acquisition + Stimulation + Gain settings }


{ ==============================================================================
--------- Setting the Acquisition channels -------------------------------------
================================================================================ }


procedure Init_AcqChannels; { setting the channels for the RTneuron-simulation mode}
var 
   gain1, gain2, gain3, epdur, f_acq, acquisitionISI :real;
   Continu, stim :boolean;
   Clamp_int, max_ep_num :integer;
begin {-- we set all the variables of the acquisition class, then we create 
      the NEURON variables and link it to the analogous variables
       -- the NEURON files are loaded thanks to main dialog buttons}

   {we load the informations from the global TDBrecord }
   Continu:=TDBrecord('PG0.global').cont_choice;
   Clamp_int:=TDBrecord('PG0.global').clamp_int;
   gain1 := TDBrecord('PG0.global').gain1 ;
   gain2 := TDBrecord('PG0.global').gain2 ;
   gain3 := TDBrecord('PG0.global').gain3 ;
   stim:=TDBrecord('PG0.global').stim;
   max_ep_num := TDBrecord('PG0.global').max_EP_num ;
   f_acq := TDBrecord('PG0.global').f_acq ;
   epdur := TDBrecord('PG0.global').episode_duration;
   acquisitionISI := TDBrecord('PG0.global').acquisitionISI ;  
   {we delete previous graphical display}
   ClearObjects(1,1);
   ClearObjects(1,2);
   ClearObjects(1,3);

   { see the documentation, for the details of the acquisition and RTneuron functions }
   RTneuron.ResetParams;
   RTneuron.FadvanceON := False ; 
   acquisition.Fcontinuous:=Continu; {boolean true ->continuous acquisition, False -> episode mode}
   acquisition.PeriodPerChannel:=1./f_acq ; {in ms}

    if stim then acquisition.Fstimulate := True
    else acquisition.Fstimulate:=False;  { we stimulate or not }
    
    acquisition.ChannelCount := 6 ;
    acquisition.MaxEpCount := max_ep_num ;
    acquisition.EpDuration := epdur ;
    
    acquisition.TriggerMode:= TM_immediate;
    acquisition.Channels[1].ChannelType:= TI_Neuron; { here we set that we read the acquisition from NEURON }
    acquisition.Channels[2].ChannelType:= TI_Neuron;
    acquisition.Channels[1].DownSamplingFactor:=1;
    acquisition.Channels[2].DownSamplingFactor:=1;
    
    acquisition.Channels[3].ChannelType:= TI_Neuron;
    acquisition.Channels[4].ChannelType:= TI_Neuron; 
    acquisition.Channels[5].ChannelType:= TI_Neuron;
    acquisition.Channels[6].ChannelType:= TI_Neuron; 
    acquisition.Channels[3].DownSamplingFactor:=1;
    acquisition.Channels[4].DownSamplingFactor:=1;
    acquisition.Channels[5].DownSamplingFactor:=1;
    acquisition.Channels[6].DownSamplingFactor:=1;
    
    if Clamp_int=1 then { IF CURRENT-CLAMP }
    begin { we link the analogous signal to the NEURON variables with the right gain }
      RTneuron.AdcChan[0].setScale(0,32767,0,1000.0/gain1); RTneuron.AdcChan[0].NrnSymbolName:='Vm';    // primary     
      RTneuron.AdcChan[1].setScale(0,32767,0,20000.0/gain2); RTneuron.AdcChan[1].NrnSymbolName:='Iinj'; // secondary 
      acquisition.Channels[1].NrnSymbolName:='Vm'; acquisition.Channels[1].unitY:='mV' ;
      acquisition.Channels[2].NrnSymbolName:='Iinj'; acquisition.Channels[2].unitY:='pA' ;
    end;                                                                                                        
    if Clamp_int=2 then { IF VOLTAGE CLAMP }
    begin
      RTneuron.AdcChan[0].setScale(0,32767,0,20000.0/gain1); RTneuron.AdcChan[0].NrnSymbolName:='Iinj';         
      RTneuron.AdcChan[1].setScale(0,32767,0,1000.0/gain2); RTneuron.AdcChan[1].NrnSymbolName:='Vm';  
      acquisition.Channels[1].NrnSymbolName:='Iinj'; acquisition.Channels[1].unitY:='pA' ;
      acquisition.Channels[2].NrnSymbolName:='Vm'; acquisition.Channels[2].unitY:='mV' ;
    end; { we will call this function each time we modify a gain }
    
    {the declaration for the axoclamp is independent of the clamp of the neuron}
    {then the declaration of the endogenous field electrodes channels}
    
    RTneuron.AdcChan[2].setScale(0,32767,0,10000.0/gain3); RTneuron.AdcChan[2].NrnSymbolName:='I_field';
    acquisition.Channels[3].NrnSymbolName:='I_field'; acquisition.Channels[3].unitY:='nA' ;
    RTneuron.AdcChan[3].setScale(0,32767,0,10000.0); RTneuron.AdcChan[3].NrnSymbolName:='Vext_first'; 
    acquisition.Channels[4].NrnSymbolName:='Vext_first'; acquisition.Channels[4].unitY:='mV' ;
    RTneuron.AdcChan[4].setScale(0,32767,0,10000.0); RTneuron.AdcChan[4].NrnSymbolName:='Vext_second'; 
    acquisition.Channels[5].NrnSymbolName:='Vext_second'; acquisition.Channels[5].unitY:='mV' ;
    RTneuron.AdcChan[5].setScale(0,32767,0,10000.0); RTneuron.AdcChan[5].NrnSymbolName:='Vext_third'; 
    acquisition.Channels[6].NrnSymbolName:='Vext_third'; acquisition.Channels[6].unitY:='mV' ;
    
    {then graphical options}
    v1.cpx:=1 ; v2.cpx:=1 ; v1.cpy := 1 ; v2.cpy:= 2; v3.cpx:= 1; v3.cpy:= 3; {we set the coupling value -> to couple to future analysis}
    
    v4.cpx := 1 ; v4.cpy := 4 ;  v5.cpx := 1 ; v5.cpy := 4 ; v6.cpx := 1 ; v6.cpy := 4 ;
    addObject(1,1,v1);  addObject(1,2,v2);   addObject(1,3,v3);
    addObject(1,4,v4);  addObject(1,4,v5);   addObject(1,4,v6);
    
end;


{ ==============================================================================
--------- Setting the Stimulation channels -------------------------------------
================================================================================ }


procedure Init_StimChannels; { crucial function as well }
var Continu, fadvanceON :boolean;Clamp_int:integer;
begin { We link the Elphy stimulation to the NEURON variable, then the NEURON variable to the analogous command }

   Continu:=TDBrecord('PG0.global').cont_choice;
   Clamp_int:=TDBrecord('PG0.global').clamp_int;
   stimulator.ChannelCount:=2;
   stimulator.setByProg:=true; { mais on met le build ep plus loin }
   {stimulation on neuron}
   stimulator.Channels[1].ChannelType:=TO_Neuron;
   {electric field stimulation created by the current}
   stimulator.Channels[2].ChannelType:=TO_Neuron;
  
   fadvanceon := TDBrecord('PG0.global').FadvanceON ; // to make NEURON calculate or not !
  
  if Clamp_int=1 then { IF CURRENT CLAMP }
  begin
    RTneuron.DacChan[0].NrnSymbolName:='Ith'; RTneuron.DacChan[0].setScale(0,32767,0,4000.0); // command -> I clamp
    stimulator.Channels[1].NrnSymbolName:='Ith';
  end;
  if Clamp_int=2 then { IF VOLTAGE CLAMP }
  begin
    RTneuron.DacChan[0].NrnSymbolName:='Vth'; RTneuron.DacChan[0].setScale(0,32767,0,200.0); // command -> V clamp
    stimulator.Channels[1].NrnSymbolName:='Vth';
  end;
   { then independently of the clamp type, the exletric stimmulation !}
   RTneuron.DacChan[1].NrnSymbolName:='I_field_th'; RTneuron.DacChan[1].setScale(0,32767,0,100.0); // command -> I clamp
   stimulator.Channels[2].NrnSymbolName:='I_field_th'; 
end;

{ =========================================================================
------------------- GAIN settings ----------------------------------------
===========================================================================  }

procedure SetGain1;
var Gain1_int:integer;
begin
    gain1_int:=TDBrecord('PG0.global').Gain1_int;
    case Gain1_int of
    1: TDBrecord('PG0.global').Gain1 := 1.0; 2: TDBrecord('PG0.global').Gain1 := 2.0;
    3: TDBrecord('PG0.global').Gain1 := 5.0; 4: TDBrecord('PG0.global').Gain1 := 10.0;
    5: TDBrecord('PG0.global').Gain1 := 20.0; 6: TDBrecord('PG0.global').Gain1 := 50.0;
    7: TDBrecord('PG0.global').Gain1 := 100.0; 8: TDBrecord('PG0.global').Gain1 := 200.0;
    9: TDBrecord('PG0.global').Gain1 := 500.0; 10: TDBrecord('PG0.global').Gain1 := 1000.0;
    11: TDBrecord('PG0.global').Gain1 := 2000.0;
    end;
end;   {SetGain1}

procedure SetGain2;
var Gain2_int:integer;
begin
    gain2_int:=TDBrecord('PG0.global').Gain2_int;
    case Gain2_int of
    1: TDBrecord('PG0.global').Gain2 := 1.0;   2: TDBrecord('PG0.global').Gain2 := 2.0; 
    3: TDBrecord('PG0.global').Gain2 := 5.0;  4: TDBrecord('PG0.global').Gain2 := 10.0;
    5: TDBrecord('PG0.global').Gain2 := 20.0;   6: TDBrecord('PG0.global').Gain2 := 50.0; 
    7: TDBrecord('PG0.global').Gain2 := 100.0;
    end;
end;   {SetGain2}

procedure SetGain3; {axoclamp settings}
var Gain3_int:integer;
begin
    gain3_int:=TDBrecord('PG0.global').Gain3_int;
    case Gain3_int of
    1: TDBrecord('PG0.global').Gain3 := 0.1; 
    2: TDBrecord('PG0.global').Gain3 := 1.0;
    3: TDBrecord('PG0.global').Gain1 := 10.0; 
    end;
end;   {SetGain1}

procedure InitializeChannels;
var amplifier : string ;
begin
	 amplifier := TDBrecord('PG0.global').amplifier ;
	 if amplifier='multiclamp' then
	 begin
	    Init_AcqChannels;
	    if acquisition.Fstimulate then Init_StimChannels;
	 end;
end;


{$EDIT acq_processes}
{ ==============================================================================
--------- BUILDING THE Acquisition PROCESSES ---------------
================================================================================ }

Endprocess
stimulator.setValue(0,0,0,0);   
stimulator.setValue(0,0,1,0);   
stimulator.setValue(0,1,0,0);  


{$EDIT ef_pulses}
{ ==============================================================================
--------- BUILDING THE PULSES STIMULATION PROCEDURES AND DIALOGS ---------------
================================================================================ }


{ ------------ Single Pulse ----------------------}

var amp_sp_ef, del_sp_ef, dur_sp_ef :real; 

procedure Build_SinglePulse_EF(seq:longint;var vec:Tvector);  {pulse procedure called at each buildep}
begin { we fill of 0, except between the t0+delay and t0+delay+duration }
  vec.fill(0); vec.fill1(amp_sp_EF,del_sp_EF+vec.Istart,del_sp_EF+dur_sp_EF+vec.Istart);
end;


{ ------------ Triple Pulses ----------------------}
var 
   amp1_tp_EF, amp2_tp_EF, amp3_tp_EF, del_tp_EF, dur1_tp_EF, dur2_tp_EF, dur3_tp_EF :real; 
procedure Build_TriplePulse_EF(seq:longint;var vec:Tvector);  
begin 
   vec.fill(0); 
   vec.fill1(amp1_tp_EF,del_tp_EF+vec.Istart,del_tp_EF+dur1_tp_EF+vec.Istart);
   vec.fill1(amp2_tp_EF,del_tp_EF+dur1_tp_EF+vec.Istart,del_tp_EF+dur1_tp_EF+dur2_tp_EF+vec.Istart);
   vec.fill1(amp3_tp_EF,del_tp_EF+dur1_tp_EF+vec.Istart,del_tp_EF+dur1_tp_EF+dur2_tp_EF+dur3_tp_EF+vec.Istart);
end;

procedure Pulse_Efield_event(n:integer); 
begin {when we modify the dialog, we adjust the stimulation params}
   Efield_dialog.updatevar;
   case n of 
   201 : begin
	 {we write all the relevant global informations}
         TDBrecord('PG0.global').cont_choice := False ; 
         TDBrecord('PG0.global').episode_duration :=  2*del_sp_EF+dur_sp_EF ;
         TDBrecord('PG0.global').max_EP_num :=0 ;
         TDBrecord('PG0.global').stim := True ;
         TDBrecord('PG0.Exp_Params').clear;
         TDBrecord('PG0.Exp_Params').exp_type:='single_pulse';
         TDBrecord('PG0.Exp_Params').pulse_amplitude:=amp_sp_EF;
         TDBrecord('PG0.Exp_params').start_at:=del_sp_EF;
         TDBrecord('PG0.Exp_Params').pulse_duration:=dur_sp_EF;
	       {then we initialize the stimulation}
	       InitializeChannels;
	       stimulator.Channels[2].BuildEp := Build_SinglePulse_EF ; 
       	 stimulator.initVectors;
         end;
   202 : begin
         {we write all the relevant global informations}
         TDBrecord('PG0.global').cont_choice := False ; 
         TDBrecord('PG0.global').episode_duration := 2*del_tp_EF+dur1_tp_EF+dur2_tp_EF ;
         TDBrecord('PG0.global').max_EP_num :=0 ;
         TDBrecord('PG0.global').stim := True ;
         TDBrecord('PG0.Exp_Params').clear;
         TDBrecord('PG0.Exp_Params').exp_type:='triple_pulse_efield';
         TDBrecord('PG0.Exp_Params').pulse_amplitude1:=amp1_tp_EF;
         TDBrecord('PG0.Exp_Params').pulse_amplitude2:=amp2_tp_EF;
         TDBrecord('PG0.Exp_Params').pulse_amplitude3:=amp3_tp_EF;
         TDBrecord('PG0.Exp_params').start_at:=del_tp_EF;
         TDBrecord('PG0.Exp_Params').pulse_duration1:=dur1_tp_EF;
         TDBrecord('PG0.Exp_Params').pulse_duration2:=dur2_tp_EF;
         TDBrecord('PG0.Exp_Params').pulse_duration3:=dur3_tp_EF;
         {then we initialize the stimulation}
         InitializeChannels; // we can initialize the channels
         stimulator.Channels[1].BuildEp := Build_TriplePulse_EF ; 
         stimulator.initVectors;
         end;
   end;
end;


procedure Init_PulsesDialog_EF;
var pn:integer;
begin
   amp_sp_EF := 50.0; del_sp_EF:=100.0; dur_sp_EF:=800.0;
   amp1_tp_EF := 50.0; amp2_tp_EF := -50.0; amp3_tp_EF := 50.0; 
   del_tp_EF  := 50.0; dur1_tp_EF:= 200.0; dur2_tp_EF:= 400.0; dur3_tp_EF:= 200.0; 

   pn:=1;
   with Efield_Dialog do
   begin
   create;
   Caption := 'Efield stimulation';
   OnEvent := Pulse_Efield_event;
   setText(' ==<| Single Pulse Stimulation |> ');
   getRealA('Amplitude (pA or mV)',amp_sp_EF,10,3,200);
   getRealA('Onset/Delay (ms)',del_sp_EF,10,3,200);
   getRealA('Duration (ms)',dur_sp_EF,10,3,200);
   getCommandA(' init() ',0,201); { OnEvent flag -> 201 }
   setText(' ==<| Triple Pulse Stimulation |> ');
   getRealA('Onset/Delay (ms)',del_tp_EF,10,3,200);
   getRealA('Amplitude 1 (pA or mV)',amp1_tp_EF,10,3,200);
   getRealA('Amplitude 2 (pA or mV)',amp1_tp_EF,10,3,200);
   getRealA('Amplitude 3 (pA or mV)',amp1_tp_EF,10,3,200);
   getRealA('Duration 1 (ms)',dur1_tp_EF,10,3,200);
   getRealA('Duration 2 (ms)',dur1_tp_EF,10,3,200);
   getRealA('Duration 3 (ms)',dur1_tp_EF,10,3,200);
   getCommandA(' init() ',0,202); { OnEvent flag -> 201 }
   end;
   Efield_dialog.show;
end;

{$EDIT patch_pulses}
{ ==============================================================================
--------- BUILDING THE PULSES STIMULATION PROCEDURES AND DIALOGS ---------------
================================================================================ }


{ ------------ Single Pulse ----------------------}

var amp_sp_ap, del_sp_ap, dur_sp_ap :real; 

procedure Build_SinglePulse_ap(seq:longint;var vec:Tvector);  {pulse procedure called at each buildep}
begin { we fill of 0, except between the t0+delay and t0+delay+duration }
  vec.fill(0); vec.fill1(amp_sp_ap,del_sp_ap+vec.Istart,del_sp_ap+dur_sp_ap+vec.Istart);
end;

procedure SinglePulse_patch_event(n:integer); 
begin {when we modify the dialog, we adjust the stimulation params}
   Patch_dialog.updatevar;
   case n of 
   201 : begin
	 {we write all the relevant global informations}
         TDBrecord('PG0.global').cont_choice := False ; 
         TDBrecord('PG0.global').episode_duration :=  2*del_sp_ap+dur_sp_ap ;
         TDBrecord('PG0.global').max_EP_num :=0 ;
         TDBrecord('PG0.global').stim := True ;
         TDBrecord('PG0.Exp_Params').clear;
         TDBrecord('PG0.Exp_Params').exp_type:='single_pulse';
         TDBrecord('PG0.Exp_Params').pulse_amplitude:=amp_sp_ap;
         TDBrecord('PG0.Exp_params').start_at:=del_sp_ap;
         TDBrecord('PG0.Exp_Params').pulse_duration:=dur_sp_ap;
	       {then we initialize the stimulation}
	       InitializeChannels;
	       stimulator.Channels[2].BuildEp := Build_SinglePulse_ap ; 
       	 stimulator.initVectors;
         end;
   end;
end;


procedure Init_PulsesDialog_ap;
var pn:integer;
begin
   amp_sp_ap := 50.0; del_sp_ap:=100.0; dur_sp_ap:=800.0;

   pn:=1;
   with Patch_Dialog do
   begin
   create;
   Caption := 'Patch stimulation';
   OnEvent := SinglePulse_patch_event;
   setText(' ==<| Single Pulse Stimulation |> ');
   getRealA('Amplitude (pA or mV)',amp_sp_ap,10,3,200);
   getRealA('Onset/Delay (ms)',del_sp_ap,10,3,200);
   getRealA('Duration (ms)',dur_sp_ap,10,3,200);
   getCommandA(' init() ',0,201); { OnEvent flag -> 201 }
   show;
   end;
end;


{$EDIT main_dialog}


{ ==============================================================================
--------- LAUNCHING THE EXPERIMENT ----------------------------------------------
================================================================================ }

procedure launch_exp;
var amplifier : string ;
begin
  amplifier := TDBrecord('PG0.global').amplifier ;
  if amplifier='nrn_simulation' then acquisition.Fcontinuous:=True ; // NEURON doesn;t support well episode mode

  DecodeDateTime(Now,Year,Month,Day,Hour,Minute,Second,MilliSecond); {function to fetch date and time}
  
  //acquisition.genericfilename := PathOfTheDay+Istr(Hour)+'_'+Istr(Minute)+'_'+Istr(Second) +  '_'+Protocolname[1] ;
  
  //FillDBinfo(DB); {even if we don't save, we will the TDBrecord object...}
  //if SAVING then acquisition.writeDBfileinfo(DB);
  {if (1<>4) and (1<>5) then mt_cursor.free ;}
  if SAVING then acquisition.startandsave else acquisition.start;
end;
 
{ ==============================================================================
--------- loading the NEURON files  --------------------------------------------
================================================================================ }

procedure load_nrn_files;   // load the NEURON model
var clamp_int : integer ; full_path : string ;
begin
clamp_int := TDBrecord('PG0.global').clamp_int ;
if clamp_int=1 then full_path := TDBrecord('PG0.global').loadnrnPath+'Iclamp_hh.hoc'
else full_path := TDBrecord('PG0.global').loadnrnPath+'Vclamp_hh.hoc';
RTneuron.execute('load_file("'+full_path+'")');
end;
          
{ ==============================================================================
--------- BUILDING THE MAIN DIALOG  --------------------------------------------
================================================================================ }

procedure MainDialog_update(n:integer); 
var amplifier : string ;
begin { Main dialog, fot the choice of the protocol, the start/stop and saving of the acquisition}     
  if acquisition.IsRunning then acquisition.stop; 
  MainDialog.updatevar;
  TDBrecord('PG0.global').Gain1_int:=gain1_int;
  TDBrecord('PG0.global').Gain2_int:=gain2_int;
  clamp_int:=TDBrecord('PG0.global').clamp_int; 
  
  case n of
    101: begin 
              Page := 1 ;               
              case protocol_choice_patch of
		             1 : begin Patch_dialog.close ; TDBrecord('PG0.global').stim:=False;TDBrecord('PG0.global').cont_choice:=True;InitializeChannels; end;
		             //2 : Init_PulsesDialog_PA; 
              end;
         end;
    1011: begin 
              Page := 1 ;               
              case protocol_choice_ef of
		             1 : begin Efield_dialog.close ; TDBrecord('PG0.global').stim:=False;TDBrecord('PG0.global').cont_choice:=True;InitializeChannels; end;
		             2 : Init_PulsesDialog_EF; 
              end;
         end;
    //111 : begin t_channels_setting.ExecuteCommand('SetGain1');  t_channels_setting.ExecuteCommand('Init_AcqChannels'); end;
    //112 : begin t_channels_setting.ExecuteCommand('SetGain2');  t_channels_setting.ExecuteCommand('Init_AcqChannels'); end;
    200 : launch_exp;
    201 : acquisition.stop ;
    301 : comments := '';
    280 : load_nrn_files ;
    281 : RTneuron.Execute(dll_load);
    282 : RTneuron.Restart;
  end;
  gain1:=TDBrecord('PG0.global').Gain1;gain2:=TDBrecord('PG0.global').Gain2;    
  clamp_int:=TDBrecord('PG0.global').clamp_int ;      
  MainDialog.update;
end;    


procedure Init_Main_Dialog; {we call this procedure when we load the main program, (else values are 0 -> dangerous for division, e.g. freq) }
var amplifier : string ;
begin
DB.create;
dll_load := TDBrecord('PG0.global').loadnrnpath ; dll_load := 'nrn_load_dll("'+dll_load+'nrnmech.dll")';
PathOfTheDay := TDBrecord('PG0.global').PathOfTheDay ; // data path
//------------ MAIN dialog
   with MainDialog do
   begin
   create;
   OnEvent := MainDialog_update;
   amplifier := TDBrecord('PG0.global').amplifier ; 
   setText(' ================================= ');
   setText(' ---------------< Protocol Selection >----------------- ');
   setText('');
   getStringList(' PROTOCOL  patch',ProtoNames_EF,'0|1|2|3',protocol_choice_patch,101);  { Onevent flag ->199}
   getStringList(' PROTOCOL  E_field',ProtoNames_PA,'0|1|2|3',protocol_choice_ef,1011);  { Onevent flag ->199}
   setText(' ================================= ');
   getStringList(' IC / VC  ','  Iclamp  |  Vclamp ','1|2',clamp_int,102);  { Onevent flag ->199}
   setText('');
   if amplifier='multiclamp' then 
     begin 
	setText(' ==<| GAIN  multiclamp|>== ');
	getStringListA('Primary Output  ','1 | 2 | 5 | 10 | 20 | 50 | 100 | 200 | 500 | 1000 | 2000',Gain1_int,111);
	getStringListA('Secondary Output ','1 | 2 | 5 | 10 | 20 | 50 | 100',Gain2_int,112);
	setText('');
     end;
   getBoolean(' saving ? ',SAVING);
   getCommandA(' => Start ...           ',0,200);
   getCommandA(' Stop the Acquisition ',0,201);
   setText('');
   getMemo(' Comments ',comments,15,4,1,300);
   getCommandA(' reset comments ',0,301);
   Caption:='Main Dialog';
  end;
Maindialog.show;
end;


{$EDIT init_from_file}
{-------------------------------------------------------------------------------
-------------------- initialisation from file ----------------------------------
-------------------------------------------------------------------------------}


var 
    already_initiated : boolean ; // to know if we need to reinitialize the TDBrecord
    global, Exp_params : TDBrecord ;

procedure global_init;
var ii:integer; PathOfTheDay : string ;
begin

RTneuron.resetParams;

ii:=1;
global.create;
global.amplifier:='nrn_simulatoin'; // choice of the amplifier
global.PathOfTheDay := 'Z:/home/yann/experiments/DATA/'; // 'D:/yann/DATA/' ;
global.loadnrnPath := 'Z:/home/yann/experiments/myelphy/nrn_files/' ;
global.root_path :='Z:/home/yann/experiments/myelphy/' ;
global.sep:='/_';  // separator for loading files  (has to change between linux and mswin)
global.f_acq:=10; // in kHz
global.gain1:=1; // gain of the first channel
global.int_gain1:=ii; // integer coding for this gain
global.gain2:=1; // gain of the second channel
global.int_gain2:=ii; //
global.gain3:=1; // gain of the second channel
global.int_gain3:=2; //
global.clamp_int := ii; // integer that code for 1:IC, 2: VC
global.cont_choice := False; // if True -> continus mode, else episode
global.stim := False;  // if True acquisition.Fstimulate := True
global.main_protocol:='';
global.protocol:='';
global.saving := False ;
global.Rs := 0;
global.Rm := 0;
global.Cm :=0;
global.episode_duration := 0 ;
global.max_EP_num :=0 ;
global.acquisitionISI:=0. ; 
global.FadvanceON := False ;


Exp_Params.create;
already_initiated :=True;
InsertPage(1,'fake');DeleteAllPages('fake');InsertPage(1,'default');DeleteAllPages('default');
Color := cl_gray ;
end;

program Launch_from_file
global_init ;
SetProtocolNames;
init_windows;
Init_Main_Dialog;


program Launch_from_main
SetProtocolNames;
init_windows;
Init_Main_Dialog;

program set_output_to_zero
Rtneuron.DacChan[0].HoldingValue:=0;
Rtneuron.DacChan[0].UseHoldingValue:=True;    
Rtneuron.DacChan[1].HoldingValue:=0;
Rtneuron.DacChan[1].UseHoldingValue:=True;    

