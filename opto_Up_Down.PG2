{$EDIT START}
{========================================================================
------- Master file for the optogenetics experiments  ---------
------- phase-locked on the slow cortical oscillation ---------
========================================================================}

Const
   ProtocolCount    = 3 ; 
   location	    = 'Macbook' ;
   
var  { ========= COMMON VARIABLES ============ }
   protocol_choice, setup_index : integer; 
   amplifier, comments, PathOfTheDay, root_dir : string ; 
   MainDialog, dialog, StimDialog : Tdialog ;{ two dialogs for buttons and protocols}
   stim, closedLoop, SAVING : boolean ; 
   ProtocolName:array[1..protocolCount] of string; ProtoNames, ProtoNum:string;
   DB:Tdbrecord ;  {for metadata information, storing comments, ... }
   Year,Month,Day,Hour,Minute,Second,MilliSecond:smallint; {variables to fetch the date and time }
   gain1,gain2 : real; gain1_int,gain2_int,clamp_int:integer;cont_choice:boolean;  
   dll_load : string ;
   f_acq : real ; // parameters of the patch recording !


var
  UD_threshold, spike_threshold, tau_LP, V0_TTL : real ;
	Up_Stim_Periodicity, Down_Stim_Periodicity :integer ;
	Delay_for_Up_stim, Delay_for_Down_stim : real ;
	Dur_for_Up_stim, Dur_for_Down_stim : real ;
   UD_dialog : Tdialog ; V_cursor : Tcursor ;

{ ============================================================================
 ---- Protocol names and graphical settings ----------------------------------
 ============================================================================= }
                                             
 
procedure SetProtocolNames;
var          
  i:integer;                           
begin
   ProtocolName[1]:= 'Spont. Act. Sampling'; 
   ProtocolName[2]:= 'Up-state stim.'; 
   ProtocolName[3]:= 'Down-state stim.';
   ProtoNames:=ProtocolName[1];
   ProtoNum :='0|1';
   for i:=2 to ProtocolCount do 
   begin ProtoNames:=ProtoNames+'|'+ProtocolName[i];
      ProtoNum:=ProtoNum+'|'+Istr(i); end;
end;    


procedure init_windows;
begin
  deleteallpages('default');
  InsertPage(1,'Vm-recording during Phase-Locked Optogenetics');
  Definewindow(1, 0, 0, PageWidth, Round(PageHeight/2.));
  Definewindow(1, 0, Round(PageHeight/2.), PageWidth, PageHeight);
  Page:=1; color:=cl_gray;
end;


{$EDIT Info_recording}
{ ============================================================================
 ---- File saving and Comments+Information storing ---------------------------
this is stored in a TDBrecord object attached to the .DAT file
 ============================================================================= }
 

procedure FillDBinfo(var DB: TDBrecord); {procedure to write the metadata !}
var jj:integer; st:string;
begin
  DB.clear; 
  DB.s:=''+CRLF;                                     
  DB.info_spec:='+ specific infos about the protocol :';  
  for jj:=1 to TDBrecord('PG0.global').count do
  begin  
    st:= TDBrecord('PG0.global').Names[jj] ;
    DB.ImplicitValue[st]:=TDBrecord('PG0.global').ImplicitValue[st] ;
  end;                                                                      
  for jj:=1 to TDBrecord('PG0.Exp_params').count do
  begin  
    st:= TDBrecord('PG0.Exp_params').Names[jj] ;
    //DB.AddField(st,jj+1);
    DB.ImplicitValue[st]:=TDBrecord('PG0.Exp_params').ImplicitValue[st] ;
  end;                                                                      
  DB.protocol:=ProtocolName[protocol_choice];
  DB.Comments := comments ; {comments is a global variable }
  DB.Day := Day ; DB.Month := Month ; DB.Year := Year ;
  DB.Hour := Hour ; DB.Minute := Minute ; DB.SEcond := Second ;    
end;

procedure save_metadata_as_txt;
var jj:integer; st, st2:string;
begin
   openText(1,acquisition.genericFilename+'.json',false);
   writelnText(1,'{');
  for jj:=1 to TDBrecord('PG0.global').count do
  begin  
    st:= TDBrecord('PG0.global').Names[jj] ;
    st2:=TDBrecord('PG0.global').Valstring[jj] ;
    writelnText(1,'"'+st+'":"'+st2+'",');
  end;                                                                      
  for jj:=1 to TDBrecord('PG0.Exp_params').count do
  begin  
    st:= TDBrecord('PG0.Exp_params').Names[jj] ;
    st2:=TDBrecord('PG0.Exp_params').Valstring[jj];
    writelnText(1,'"'+st+'":"'+st2+'",');
  end;        
  for jj:=1 to ChannelCount do WriteLnText(1, '"DY'+Istr(jj)+'" : "'+Rstr(v[jj].dY)+'",');
  writelnText(1,'"lastline":"no_value"');
  writelnText(1,'}');
  closeText(1);                                                              
end;

procedure my_initprocess0;
var Year,Month,Day,Hour,Minute,Second,MilliSecond:smallint; PathOfTheDay, sep, protocol  : string ; {variables to fetch the date and time }
begin
  PathOfTheDay := TDBrecord('PG0.global').PathOfTheDay ;
  protocol := TDBrecord('PG0.Exp_params').exp_type ;
  DecodeDateTime(Now,Year,Month,Day,Hour,Minute,Second,MilliSecond); {function to fetch date and time}
  acquisition.genericfilename := PathOfTheDay+Istr(Hour)+'_'+Istr(Minute)+'_'+Istr(Second)+  '_'+protocol ;
  FillDBinfo(DB); 
  if acquisition.saving then  acquisition.writeDBfileinfo(DB);
end;

{$EDIT channels_settings} 
{ Acquisition + Stimulation + Gain settings }


{ ==============================================================================
--------- Setting the Acquisition channels -------------------------------------
================================================================================ }

procedure UpdateCursor(n:integer);
begin
   UD_threshold := V_cursor.position[1];
   spike_threshold := V_cursor.position[2];
   UD_dialog.update;
end;

procedure FinalPlot_Settings;
begin
   v1.cpx:=1 ; v2.cpx:=1 ; v3.cpx:=1 ;
   v1.cpy:=1 ; v2.cpy := 2 ; v3.cpy:= 2 ;  {we set the coupling value -> to couple to future analysis} 
   v2.color := CL_Red ; v3.color := CL_Blue ;
   V_cursor.create ; V_cursor.DoubleCursor:=True ; V_cursor.style:=cs_Y ;
   V_cursor.InstallSource(v1); V_cursor.visible:=True ;
   V_cursor.position[1]:=UD_threshold ; V_cursor.position[2]:=spike_threshold ; 
   V_cursor.OnChange:=UpdateCursor;
end;

procedure Set_DC_Channels_DEMO;       {NOT WORKING YET !!!!}
var 
   i : integer; f_acq:real;
begin {-- we set all the variables of the acquisition class, then we create 
      the NEURON variables and link it to the analogous variables
       -- the NEURON files are loaded thanks to main dialog buttons}

   acquisition.ChannelCount := 3; // vm, v_up, v_ttl
   RTneuron.Execute('objref UD_loop, stim'); // initialization so that they are put to 'nil' by default

   {we delete previous graphical display}
   ClearObjects(1,1); ClearObjects(1,2);

   acquisition.Fcontinuous:=true;
   acquisition.Fstimulate := False ; {we DON'T stimulate in Elphy!!}
   f_acq := TDBrecord('PG0.global').f_acq ;
   acquisition.PeriodPerChannel:=1./f_acq ; { in ms }
 
   for i:=1 to 3 do 
   begin 
     acquisition.Channels[i].ChannelType := TI_Neuron;
     acquisition.Channels[i].DownSamplingFactor:=1;
   end;
   
   RTneuron.FadvanceON:=True; { in dynamic clamp -> NEURON calculus }  
   RTneuron.execute('create soma');
   RTneuron.execute('insert pas');
   RTneuron.execute('e_pas=-80.');
   RTneuron.execute('L=diam=79.8');
   RTneuron.Execute('g_pas = 5e-5');
   RTneuron.execute('insert WangBuszaki');
   addObject(1,1,v1); v1.title:='Vm(t)';
   acquisition.Channels[1].NrnSymbolName:='soma.v(.5)'; acquisition.Channels[1].unitY:='mV' ;
   RTneuron.Execute('soma stim = new cExpSyn_with_static_cond(.5)');

   if closedLoop then
      begin
   	 RTneuron.Execute('soma UD_loop = new opto_Up_Down(.5)');
   	 acquisition.Channels[2].NrnSymbolName:='UD_loop.V_TTL'; acquisition.Channels[2].unitY:='mV' ;
   	 acquisition.Channels[3].NrnSymbolName:='UD_loop.Up_flag'; acquisition.Channels[3].unitY:='mV' ;
   	 addObject(1,2,v2); addObject(1,2,v3); v2.title:='Online-Analysis Quantities';
      end;

   FinalPlot_Settings;
end;

procedure Set_DC_channels;
var 
   gain1, gain2, epdur, f_acq, acquisitionISI :real;
   Continu, stim :boolean;
   Clamp_int, max_ep_num, i :integer;
begin {-- we set all the variables of the acquisition class, then we create 
      the NEURON variables and link it to the analogous variables
       -- the NEURON files are loaded thanks to main dialog buttons}

   acquisition.ChannelCount := 6; // for the whole classic_electrophy protocols
   RTneuron.Execute('objref UD_loop, stim'); // initialization so that they are put to 'nil' by default

   {we delete previous graphical display}
   ClearObjects(1,1); ClearObjects(1,2);
   
   acquisition.Fcontinuous:=true;
   acquisition.Fstimulate := False ; {we DON'T stimulate in Elphy!!}
   gain1 := TDBrecord('PG0.global').gain1 ;
   gain2 := TDBrecord('PG0.global').gain2 ;
   f_acq := TDBrecord('PG0.global').f_acq ;
   acquisition.PeriodPerChannel:=1./f_acq ; { in ms }

   for i:=1 to 3 do 
   begin 
     acquisition.Channels[i].ChannelType := TI_Neuron;
     acquisition.Channels[i].DownSamplingFactor:=1;
   end;
   
   // MEMBRANE POTENTIAL, SENT TO THE DYNAMIC CLAMP LOOP
   RTneuron.AdcChan[0].setScale(0,32767,0,1000.0/gain1); RTneuron.AdcChan[0].NrnSymbolName:='soma.v(.5)';
   acquisition.Channels[1].NrnSymbolName:='soma.v(.5)'; acquisition.Channels[1].unitY:='mV' ;
   addObject(1,1,v1); v1.title:='Vm(t)';
   
   if closedLoop then
      begin
	 RTneuron.Execute('soma UD_loop = new opto_Up_Down(.5)');
	 // CHECKING THE OUTPUT OF THE FEEDBACK LOOP , additional inputs for closed-loop setting
	 RTneuron.AdcChan[1].setScale(0,32767,0,1000.0/gain1); RTneuron.AdcChan[1].NrnSymbolName:='TTL_CHECK'; // secondary comes from analogous
	 RTneuron.AdcChan[2].setScale(0,32767,0,1000.0/gain1); RTneuron.AdcChan[2].NrnSymbolName:='UP_CHECK'; // secondary comes from analogous
	 // OUTPUT OF THE FEEDBACK LOOP                                      
	 RTneuron.DacChan[0].NrnSymbolName:='UD_loop.V_TTL'; RTneuron.DacChan[0].setScale(0,32767,0,1000.0/gain1); {command -> I clamp, stim.i in nA !!! and opposite sign !!!}
	 RTneuron.DacChan[1].NrnSymbolName:='UD_loop.Up_flag'; RTneuron.DacChan[1].setScale(0,32767,0,1000.0/gain1); {command -> I clamp, stim.i in nA !!! and opposite sign !!!}
	 acquisition.Channels[2].NrnSymbolName:='TTL_CHECK'; acquisition.Channels[2].unitY:='mV' ;
	 acquisition.Channels[3].NrnSymbolName:='UP_CHECK'; acquisition.Channels[3].unitY:='mV' ;
	 addObject(1,2,v2); addObject(1,2,v3); v2.title:='Online-Analysis Quantities';
      end;
   
   FinalPlot_Settings;
end;

{ =========================================================================
------------------- GAIN settings ----------------------------------------
===========================================================================  }

procedure SetGain1;
var Gain1_int:integer;
begin

    gain1_int:=TDBrecord('PG0.global').Gain1_int;
    case Gain1_int of
    1: TDBrecord('PG0.global').Gain1 := 1.0; 2: TDBrecord('PG0.global').Gain1 := 2.0;
    3: TDBrecord('PG0.global').Gain1 := 5.0; 4: TDBrecord('PG0.global').Gain1 := 10.0;
    5: TDBrecord('PG0.global').Gain1 := 20.0; 6: TDBrecord('PG0.global').Gain1 := 50.0;
    7: TDBrecord('PG0.global').Gain1 := 100.0; 8: TDBrecord('PG0.global').Gain1 := 200.0;
    9: TDBrecord('PG0.global').Gain1 := 500.0; 10: TDBrecord('PG0.global').Gain1 := 1000.0;
    11: TDBrecord('PG0.global').Gain1 := 2000.0;
    end;
end;   {SetGain1}

procedure InitializeChannels;
var amplifier : string ;
begin
         amplifier := TDBrecord('PG0.global').amplifier ;
         if amplifier='nrn_simulation' then Set_DC_channels_DEMO;
         { if amplifier='multiclamp' then Set_DC_channels; }
end;

procedure set_dac_to_zero;
begin
Rtneuron.DacChan[0].HoldingValue:=0;
Rtneuron.DacChan[0].UseHoldingValue:=True;    
Rtneuron.DacChan[1].HoldingValue:=0;
Rtneuron.DacChan[1].UseHoldingValue:=True;  
with stimulator do
  begin
    stimulator.setValue(0,0,0,0);   
    stimulator.setValue(0,0,1,0);   
    stimulator.setValue(0,1,0,0);  
end; 
end;

{$EDIT Up-state-test}
{ ==============================================================================
--------------- BUILDING THE OPTOGENTICS IN UP-STATE  --------------------
================================================================================ }


procedure init_csts;
begin
   f_acq := 10. ; 
   UD_threshold :=-60;
   tau_LP := 20.;
   spike_threshold := -30;
   V0_TTL := 5;
   Up_Stim_Periodicity := 3 ;
   Down_Stim_Periodicity := 3 ;
   Delay_for_Up_stim := 30 ;
   Delay_for_Down_stim  := 80  ;
   Dur_for_Up_stim := 100   ;
   Dur_for_Down_stim := 100 ;
end;
  
procedure write_Exp_params; {to be used by all subsequent protocols}
begin
   TDBrecord('PG0.global').f_acq := f_acq ; 
   TDBrecord('PG0.Exp_params').UD_threshold := UD_threshold ;
   TDBrecord('PG0.Exp_params').tau_LP := tau_LP;
   TDBrecord('PG0.Exp_params').spike_threshold :=  spike_threshold;
   TDBrecord('PG0.Exp_params').V0_TTL := V0_TTL;
   TDBrecord('PG0.Exp_params').Up_Stim_Periodicity := Up_Stim_Periodicity ;
   TDBrecord('PG0.Exp_params').Down_Stim_Periodicity := Down_Stim_Periodicity  ;
   TDBrecord('PG0.Exp_params').Delay_for_Up_stim := Delay_for_Up_stim  ;
   TDBrecord('PG0.Exp_params').Delay_for_Down_stim  := Delay_for_Down_stim  ;
   TDBrecord('PG0.Exp_params').Dur_for_Up_stim := Dur_for_Up_stim    ;
   TDBrecord('PG0.Exp_params').Dur_for_Down_stim := Dur_for_Down_stim   ;
end;

{ ==============================================================================
--------------- INITIALIZE A SINGLE PROTOCOL --------------------
================================================================================ }

procedure Init_single_exp;
var amplifier : string ;
begin
   if closedLoop then
      begin
	 {configuring the seed of the excitatory presynaptic events}
	 RTneuron.execute('UD_loop.UD_threshold = '+Rstr(UD_threshold));
	 { RTneuron.execute('UD_loop.tau_LP = '+Rstr(tau_LP)); }
	 RTneuron.execute('UD_loop.spike_threshold = '+Rstr(spike_threshold));
	 RTneuron.execute('UD_loop.V0_TTL = '+Rstr(V0_TTL));
	 RTneuron.execute('UD_loop.Up_Stim_Periodicity = '+Istr(Up_Stim_Periodicity));
	 RTneuron.execute('UD_loop.Down_Stim_Periodicity = '+Istr(Down_Stim_Periodicity));
	 RTneuron.execute('UD_loop.Delay_for_Up_stim = '+Rstr(Delay_for_Up_stim));
	 RTneuron.execute('UD_loop.Delay_for_Down_stim = '+Rstr(Delay_for_Down_stim));
	 RTneuron.execute('UD_loop.Dur_for_Up_stim = '+Rstr(Dur_for_Up_stim));
	 RTneuron.execute('UD_loop.Dur_for_Down_stim = '+Rstr(Dur_for_Down_stim));
      end;
   
   amplifier := TDBrecord('PG0.global').amplifier ;
   if amplifier='nrn_simulation' then
      // we set a sequence of Up and Down states !!
      begin
   	 RTneuron.execute('objref ncE, nsE, ncI, nsI');
   	 RTneuron.execute('soma nsE = new NetStim(.5)');
   	 RTneuron.execute('nsE.start = 0'); RTneuron.execute('nsE.number = 1e30');
   	 RTneuron.execute('nsE.noise = 1'); // frequency and seed comes later !
   	 RTneuron.execute('ncE = new NetCon(nsE, stim)');
   	 RTneuron.execute('ncE.delay = 0');
   	 RTneuron.execute('soma nsI = new NetStim(.5)');
   	 RTneuron.execute('nsI.start = 0'); RTneuron.execute('nsI.number = 1e30');
   	 RTneuron.execute('nsI.noise = 1');
   	 RTneuron.execute('ncI = new NetCon(nsI, stim)');
   	 RTneuron.execute('ncI.delay = 0');
   	 RTneuron.execute('nsE.seed(0)');
   	 RTneuron.execute('nsI.seed(2)');
   	 {synaptic weights}
   	 RTneuron.execute('ncE.weight = 0.003');
   	 RTneuron.execute('ncI.weight = -0.003'); {NEGATIVE FLAG !!!}
   	 {then synaptic times}
   	 RTneuron.execute('stim.tau = 5');
   	 {synaptic reversal potential}
   	 RTneuron.execute('stim.DrivingForce = 30');
   	 { static conductance }
   	 RTneuron.execute('stim.muV = -55');
   	 RTneuron.execute('stim.Gs = 0.4');
   	 {firing frequencies}
	 RTneuron.execute('nsE.interval = 0.1');
	 RTneuron.execute('nsI.interval = 0.1');
   	 {current to bring at mean}
   	 RTneuron.execute('stim.I0 = 0.3');
   	 RTneuron.execute('objref fih, rand, cvode');
   	 RTneuron.execute('rand = new Random()');
   	 RTneuron.execute('rand.normal(400,200*200)');
	 RTneuron.execute('cvode = new CVode()');
   	 RTneuron.execute('fih = new FInitializeHandler(1, "f1()")');
	 RTneuron.execute('tt = 0.');
	 RTneuron.execute('proc f1() {for i=0, 100 {tt = tt+rand.repick() print tt cvode.event(tt, "stim.stop_flag=(1-stim.stop_flag)")}}');
      end;
   // the initialization
   RTneuron.execute('finitialize(-80.)');
end;

procedure UD_DialogEvent(n:integer);
begin
   UD_dialog.updatevar;
   case n of
     201 : begin InitializeChannels; Init_Single_Exp; end;
     end;
     UD_dialog.update;
end;  

procedure InitUDdialog;
begin
   TDBrecord('PG0.Exp_params').exp_type := 'Up-state-stim' ;
   with UD_dialog do
   begin
      create;
      OnEvent:=UD_DialogEvent;
      { !! Very Important : at every GUI event, we call this function}
      setText('__==** Optogenetical Stim. Phase-locked to the Slow Oscill.  **==__');
      setText('______________________________________');
      setText('o==> Real-Time analysis parameters :');
      getRealA('Time constant for Low-Pass filter (ms)',tau_LP,10,3,200);
      getRealA('Vm threshold for Up-Down transitions (mV) ',UD_threshold,10,3,200);
      getRealA('spike-cut threshold (mV) ',spike_threshold,10,3,200);
      setText('______________________________________');
      setText('o==> TTL parameters :');
      getRealA('TTL input value (mV) ',V0_TTL,10,3,200);
      setText('______________________________________');
      setText('o==> Up-state stim parameters :');
      getIntegerA('Periodicity (1 stim every XX cycles)', Up_Stim_Periodicity,6,200);
      getRealA('Delay after Up-state start (ms) ', Delay_for_Up_stim,10,3,200);
      getRealA('Stimulus duration (ms) ', Dur_for_Up_stim,10,3,200);
      setText('______________________________________');
      setText('o==> Down-state stim parameters :');
      getIntegerA('Periodicity (1 stim every XX cycles)', Down_Stim_Periodicity,6,200);
      getRealA('Delay after Down-state start (ms) ', Delay_for_Down_stim,10,3,200);
      getRealA('Stimulus duration (ms) ', Dur_for_Down_stim,10,3,200);
      setText('______________________________________');
      setText('');
      getCommandA(' Initialize Exp. ',0,201); { OnEvent flag -> 201 }
      Caption:='Real-Time-opto Up&Down';
      Show;
   end;
end;


{$EDIT Spont-act-sampling}
{ ==============================================================================
--------------- Spontaneous activity sampling --------------------
================================================================================ }

var hist, hist_der : Tvector; V0_cursor : Tcursor;
procedure Calculate_Threshold;
var i0, ii : longint;
begin
   hist.create(t_single,0,100);hist.x0:=-80;hist.dx:=1.;
   hist_der.create(t_single,0,-1);hist_der.x0:=-80;hist_der.dx:=1.;
   Distri(v1, hist, -80, 20);
   VmulNum(hist, 1./(hist.ymax));
   hist.SetWorld(-80, 20, 0, hist.ymax);
   derivativeEx(hist, hist_der, 2, -80, 20);
   V0_cursor.create ;
   V0_cursor.posMin := -90;
   V0_cursor.posMax := 20;
   V0_cursor.style:=cs_X ;
   V0_cursor.visible:=True ;
   hist_der.fill1(-1, -80., hist.maxiX0); // filling all values previous to Down state peak with negative values
   ii := 0;
   while ((hist_der.yvalue[ii]<0) and (ii<hist.Iend)) do ii := ii+1;
   V0_cursor.position[1]:=hist_der.convx(ii);
   V0_cursor.InstallSource(hist);
   addObject(1,2,hist);
end;

procedure Set_Threshold;
begin
   UD_threshold := V0_cursor.position[1];
   UD_dialog.update;
   V_cursor.position[1]:=V0_cursor.position[1];
   v1.refresh;
end;


procedure SAS_DialogEvent(n:integer);
begin
   UD_dialog.updatevar;
   case n of
     201 : begin Calculate_Threshold; end;
     202 : begin Set_Threshold; end;
     end;
     UD_dialog.update;
end;  

procedure InitSASdialog;
begin
   TDBrecord('PG0.Exp_params').exp_type := 'Up-state-stim' ;
   with UD_dialog do
   begin
      create;
      OnEvent:=SAS_DialogEvent;
      { !! Very Important : at every GUI event, we call this function}
      setText('__==** Analyzing the Slow Oscill.  **==__');
      setText('______________________________________');
      setText('o==> Real-Time analysis parameters :');
      getRealA('Time constant for Low-Pass filter (ms)',tau_LP,10,3,200);
      getRealA('Vm threshold for Up-Down transitions (mV) ',UD_threshold,10,3,200);
      getRealA('spike-cut threshold (mV) ',spike_threshold,10,3,200);
      setText('');
      getCommandA(' Calculate optimal threshold',0,201); { OnEvent flag -> 201 }
      getCommandA(' Set optimal threshold',0,202); { OnEvent flag -> 201 }
      Caption:='Sampling Spont. Act.';
      Show;
   end;
end;

{$EDIT Main_dialog}
{ ==============================================================================
--------- BUILDING THE MAIN DIALOG  --------------------------------------------
================================================================================ }

procedure Update_Setup_Location;
begin
// On OS-X MacBook   
if setup_index=1 then
begin
/// ---- CASE ON OS X Macbook
TDBrecord('PG0.global').amplifier:='nrn_simulation';
PathOfTheDay := 'Z:\Users\yzerlaut\Documents\DATA\'+Istr(Year)+'_'+Istr(Month)+'_'+Istr(Day)+'\' ; 
TDBrecord('PG0.global').loadnrnPath := 'Z:/Users/yzerlaut/work/elphy/nrn_files/' ;
SAVING:=False;
end;
/// ---- CASE ON EXPERIMENTAL SETUP WITH NI CARD
if setup_index=2 then
begin
TDBrecord('PG0.global').amplifier:='multiclamp';
PathOfTheDay := 'D:\Yann\DATA\'+Istr(Year)+'_'+Istr(Month)+'_'+Istr(Day)+'\' ; 
TDBrecord('PG0.global').loadnrnPath := 'D:/Yann/elphy/nrn_files/' ; 
end;
{ /// ---- CASE ON LAPTOP }
{ if location='Notebook'then }
{ begin }
{ TDBrecord('PG0.global').amplifier:='nrn_simulation'; // choice of the amplifier }
{ PathOfTheDay := 'C:\Users\yann\Documents\DATA\'+Istr(Year)+'_'+Istr(Month)+'_'+Istr(Day)+'\' ; }
{ TDBrecord('PG0.global').loadnrnPath := 'D:/home/yann/work/elphy/nrn_files/' ;  }
{ end; }
{ if location='Linux' then }
{ begin }
{ /// ---- CASE ON LINUX MACHINE }
{ TDBrecord('PG0.global').amplifier:='nrn_simulation'; }
{ PathOfTheDay := 'Z:\home\yann\Documents\DATA\'+Istr(Year)+'_'+Istr(Month)+'_'+Istr(Day)+'\' ;  }
{ TDBrecord('PG0.global').loadnrnPath := 'Z:/home/yann/work/elphy/nrn_files/' ;  }
{ end; }
if DirectoryExists(PathOfTheDay)=False then CreateDir(PathOfTheDay);
TDBrecord('PG0.global').PathOfTheDay := PathOfTheDay ;
dll_load := TDBrecord('PG0.global').loadnrnpath ;
dll_load := 'nrn_load_dll("'+dll_load+'nrnmech.dll")';
PathOfTheDay := TDBrecord('PG0.global').PathOfTheDay ; // data path
amplifier := TDBrecord('PG0.global').amplifier ;
end;

procedure MainDialog_update(n:integer); 
var amplifier : string ;
begin { Main dialog, fot the choice of the protocol, the start/stop and saving of the acquisition}     
  if acquisition.IsRunning then acquisition.stop; 
  MainDialog.updatevar;
  TDBrecord('PG0.global').Gain1_int:=gain1_int;
  TDBrecord('PG0.global').Gain2_int:=gain2_int;
  TDBrecord('PG0.global').clamp_int := clamp_int; 
  TDBrecord('PG0.global').f_acq := f_acq; 
  case n of
    101: begin 
              case protocol_choice of
		1 : begin closedLoop:=False ; InitSASdialog; end;
		2 : begin closedLoop:=True; Up_Stim_Periodicity:=3; Down_Stim_Periodicity:=10000000; InitUDdialog; end;
		3 : begin closedLoop:=True; Down_Stim_Periodicity:=3; Up_Stim_Periodicity:=10000000; InitUDdialog; end;
              end;
	      // we initialize the experiment with the default parameters !
	      InitializeChannels; Init_single_exp;	    
         end;
    37: Update_Setup_Location;
    111 : begin SetGain1; end;
    200 : if SAVING then acquisition.startandsave else acquisition.start;
    201 : acquisition.stop ;
    301 : comments := '';
    281 : RTneuron.Execute(dll_load);
    282 : RTneuron.Restart;
  end;
  gain1:=TDBrecord('PG0.global').Gain1;
  gain2:=TDBrecord('PG0.global').Gain2;    
  clamp_int:=TDBrecord('PG0.global').clamp_int ;      
  f_acq := TDBrecord('PG0.global').f_acq ; 
  MainDialog.update;
end;    


procedure Init_Main_Dialog; {we call this procedure when we load the main program, (else values are 0 -> dangerous for division, e.g. freq) }
var amplifier : string ;
begin
DB.create;
protocol_choice := 0;
//------------
   with MainDialog do
   begin
      create;
      getStringList(' Setup : ',' |yanns_McBk|Exp_Setup','0|1|2',setup_index,37);  { Onevent flag ->199}
      getRealA('Acquisition freq. (kHz)',f_acq,3,2,785);
      setText('');
      OnEvent := MainDialog_update;
   
      getCommandA(' restart NEURON ',0,282);
      getCommandA(' load NEURON mech ',0,281);
      //getCommandA(' load NEURON model ',0,280); 

      setText(' ================================= ');
      setText(' ---------------< Protocol Selection >----------------- ');
      setText('');
      getStringList('  PROTOCOL  ',ProtoNames,Protonum,protocol_choice,101);  { Onevent flag ->199}
   setText(' ================================= ');
   setText('');
   setText(' ==<| GAIN  |>== ');
   getStringListA('Primary Output  ','1 | 2 | 5 | 10 | 20 | 50 | 100 | 200 | 500 | 1000 | 2000',Gain1_int,111);
   setText('');
   getBoolean(' saving ? ',SAVING);
   getCommandA(' => Start ...           ',0,200);
   getCommandA(' Stop the Acquisition ',0,201);
   setText('');
   getMemo(' Comments ',comments,15,4,1,300);
   getCommandA(' reset comments ',0,301);
   Caption:='RT-optogenetics';
  end;
Maindialog.show;
end;


{$EDIT init_from_file}
{-------------------------------------------------------------------------------
-------------------- initialisation from file ----------------------------------
-------------------------------------------------------------------------------}

var 
    already_initiated : boolean ; // to know if we need to reinitialize the TDBrecord
    global, Exp_params : TDBrecord ;
    vec_params : Tvector ;

procedure global_init;
var PathOfTheDay : string ;
begin

RTneuron.resetParams;
DecodeDateTime(Now,Year,Month,Day,Hour,Minute,Second,MilliSecond); {function to fetch date and time}

SAVING:=True;
global.create; Exp_Params.create;
 
// those 3 parameters are obvious, we just keep them for compatibility with the other conventions
TDBrecord('PG0.global').clamp_int := 1; // integer that code for 1:IC, 2: VC
TDBrecord('PG0.global').cont_choice := True; // if True -> continus mode, else episode
TDBrecord('PG0.global').stim := False;  // if True acquisition.Fstimulate := True
TDBrecord('PG0.global').main_protocol:='';
TDBrecord('PG0.global').protocol:='RT-opto-Up-Down';
TDBrecord('PG0.global').exp_type:='RT-opto-Up-Down';
TDBrecord('PG0.global').saving := True ;
gain1 :=1 ; gain2 := 1. ;
TDBrecord('PG0.global').gain1 := gain1 ;  TDBrecord('PG0.global').gain2 := gain2 ;
TDBrecord('PG0.global').FadvanceON := True ;  
InsertPage(1,'fake');DeleteAllPages('fake');InsertPage(1,'default');DeleteAllPages('default');
Color := cl_gray ;
end;

program Launch
{ see the documentation, for the details of the acquisition and RTneuron functions }
RTneuron.ResetParams;
init_csts;
global_init ;
setup_index := 1;
Update_Setup_Location;
SetProtocolNames;
init_windows;
Init_Main_Dialog;
